import 'dart:io';
import 'dart:developer' as logger show log;

import 'package:flutter/services.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:intl/intl.dart';
import 'package:open_file/open_file.dart';
import 'package:path_provider/path_provider.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:task1/App%20screen/notifications/local_notification.dart';
// import 'package:string_validator/string_validator.dart';



class PdfUtils {

  // PdfUtils._();

  static Future<Uint8List> generatePDF(List<Map<String, dynamic>> data) async {
    print('generating PDF ......');

    // Sort data by date-time in ascending order
    data.sort((a, b) {
      DateTime dateTimeA = _parseDateTime(a['date'], a['time']);
      DateTime dateTimeB = _parseDateTime(b['date'], b['time']);
      return dateTimeA.compareTo(dateTimeB);
    });



    // Calculate totals and prepare data for the table
    List<Map<String, dynamic>> dataList = [];
    int totalInPositive = 0;
    int totalInNegative = 0;

    for (var subdata in data) {
      int amount = int.parse(subdata['amount']);
      String condition = subdata['condition'];
      if (condition == 'Credit') {
        totalInPositive += amount;
      } else {
        totalInNegative += amount;
      }
      dataList.add(subdata);
    }

    int netBalance = totalInPositive - totalInNegative.abs();

    final pdf = pw.Document();
    // fetching a directory to save our pdf to
    Directory? filePath = await getDownloadsDirectory();
    List<pw.Widget> widget = [];
    final image = (await rootBundle.load('assets/img/google.png')).buffer.asUint8List();
    final header = pw.Container(
      padding: pw.EdgeInsets.all(10),
      height: 60,
      color: PdfColor.fromHex('#aaddfbd9'),
      child: pw.Row(
        crossAxisAlignment: pw.CrossAxisAlignment.center,
        children: [
          pw.Image(pw.MemoryImage(image),
          width: 40,height: 40,fit: pw.BoxFit.cover),
          pw.Padding(
            padding: pw.EdgeInsets.only(left: 10),
            child: pw.Column(
              crossAxisAlignment: pw.CrossAxisAlignment.start,
              children: [
                pw.Text('Report',
                style: pw.TextStyle(fontWeight: pw.FontWeight.bold)),
                pw.Text('Generated By - Admin',
                    style: pw.TextStyle(color: PdfColor.fromHex("#666"),fontSize: 10,)),
              ]
            )
          )
        ]
      )
    );

    final gap30 = pw.SizedBox(height: 30);
    final balancearea = pw.Row(mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,children: [
      pw.Expanded(
        child: pw.Container(
          padding: pw.EdgeInsets.all(10),
          height: 70,
          decoration: pw.BoxDecoration(
            border: pw.Border.all(color: PdfColor.fromHex("#f0f0f0")),
          ),
          child: pw.Column(
            mainAxisAlignment: pw.MainAxisAlignment.center,
            crossAxisAlignment: pw.CrossAxisAlignment.start,
            children: [
              pw.Text("Total Credit",
                style: pw.TextStyle(color: PdfColor.fromHex('#666'),fontSize: 10)),
              pw.Text("$totalInPositive",
                  style: pw.TextStyle(color: PdfColors.green,fontWeight: pw.FontWeight.bold))
            ]
          )
        )
      ),
      pw.Expanded(
          child: pw.Container(
              padding: pw.EdgeInsets.all(10),
              height: 70,
              decoration: pw.BoxDecoration(
                border: pw.Border.all(color: PdfColor.fromHex("#f0f0f0")),
              ),
              child: pw.Column(
                  mainAxisAlignment: pw.MainAxisAlignment.center,
                  crossAxisAlignment: pw.CrossAxisAlignment.start,
                  children: [
                    pw.Text("Total Debit  ",
                        style: pw.TextStyle(color: PdfColor.fromHex('#666'),fontSize: 10)),
                    pw.Text("$totalInNegative",
                        style: pw.TextStyle(color: PdfColors.red,fontWeight: pw.FontWeight.bold))
                  ]
              )
          )
      ),
      pw.Expanded(
          child: pw.Container(
              padding: pw.EdgeInsets.all(10),
              height: 70,
              decoration: pw.BoxDecoration(
                border: pw.Border.all(color: PdfColor.fromHex("#f0f0f0")),
              ),
              child: pw.Column(
                  mainAxisAlignment: pw.MainAxisAlignment.center,
                  crossAxisAlignment: pw.CrossAxisAlignment.start,
                  children: [
                    pw.Text("Net Balance",
                        style: pw.TextStyle(color: PdfColor.fromHex('#666'),fontSize: 10)),
                    pw.Text("$netBalance",
                        style: pw.TextStyle(color: PdfColors.black,fontWeight: pw.FontWeight.bold))
                  ]
              )
          )
      ),
    ]);

    

    final footer = pw.Container(height: 50,child: pw.Center(
      child: pw.Text('thank you!')
    ));



    widget.add(header);
    widget.add(gap30);
    widget.add(balancearea);
    widget.add(gap30);
    widget.add(table(data));
    widget.add(gap30);
    widget.add(footer);

    pdf.addPage(
      pw.MultiPage(
        margin: pw.EdgeInsets.only(top: 80,bottom: 80,left: 50,right: 50),
        pageFormat: PdfPageFormat.a3,
        build: (pw.Context context){
          return widget;
        }
      )
    );


    return pdf.save();
  }

  static DateTime _parseDateTime(String date, String time) {
    // Define the input format and the output format
    final inputFormat = DateFormat('yyyy-MM-dd hh:mm a');
    final parsedDate = inputFormat.parse('$date $time');

    return parsedDate;
  }





  static pw.Table table(List<Map<String, dynamic>> data){
    List<pw.TableRow> rows = data.map((item) {
      return pw.TableRow(
        decoration: pw.BoxDecoration(border: pw.Border.all(color: PdfColors.black)),
          children:<pw.Widget>[
            pw.Padding(
                padding: pw.EdgeInsets.all(10),
                child: pw.Text(item['date'] ?? '',
                    textAlign: pw.TextAlign.left,
                    style: pw.TextStyle(fontSize: 10))),
            pw.Padding(
                padding: pw.EdgeInsets.all(10),
                child: pw.Text(item['remarks'] ?? '',
                    textAlign: pw.TextAlign.left,
                    style: pw.TextStyle(fontSize: 10))),
            pw.Padding(
                padding: pw.EdgeInsets.all(10),
                child: pw.Text(item['amount'] ?? '',
                    textAlign: pw.TextAlign.left,
                    style: pw.TextStyle(fontSize: 10))),
            pw.Padding(
                padding: pw.EdgeInsets.all(10),
                child: pw.Text(item['amount'] ?? '',
                    textAlign: pw.TextAlign.left,
                    style: pw.TextStyle(fontSize: 10))),
            pw.Padding(
                padding: pw.EdgeInsets.all(10),
                child: pw.Text(item['customer'] ?? '',
                    textAlign: pw.TextAlign.left,
                    style: pw.TextStyle(fontSize: 10))),
            pw.Padding(
                padding: pw.EdgeInsets.all(10),
                child: pw.Text(item['payment method'] ?? '',
                    textAlign: pw.TextAlign.left,
                    style: pw.TextStyle(fontSize: 10))),
          ]
      );
    }).toList();
    return pw.Table(
        border: pw.TableBorder.all(color: PdfColor.fromHex('#f0f0f0')),
        columnWidths: const <int,pw.TableColumnWidth>{
          0: pw.FixedColumnWidth(100),
          1: pw.FixedColumnWidth(80),
          2: pw.FixedColumnWidth(80),
          6: pw.FixedColumnWidth(90),
          8: pw.FixedColumnWidth(100),
        },
        children: <pw.TableRow>[
          pw.TableRow(
              decoration: pw.BoxDecoration(color: PdfColor.fromHex('#009EFB')),
              children: <pw.Widget>[
                pw.Padding(
                    padding: pw.EdgeInsets.all(10),
                    child: pw.Text("Date",
                        textAlign: pw.TextAlign.left,
                        style: pw.TextStyle(
                            fontSize: 10,
                            color: PdfColors.white,
                            fontWeight: pw.FontWeight.bold))),
                pw.Padding(
                    padding: pw.EdgeInsets.all(10),
                    child: pw.Text("Details",
                        textAlign: pw.TextAlign.left,
                        style: pw.TextStyle(
                            fontSize: 10,
                            color: PdfColors.white,
                            fontWeight: pw.FontWeight.bold))),
                pw.Padding(
                    padding: pw.EdgeInsets.all(10),
                    child: pw.Text("Credit amount",
                        textAlign: pw.TextAlign.left,
                        style: pw.TextStyle(
                            fontSize: 10,
                            color: PdfColors.white,
                            fontWeight: pw.FontWeight.bold))),
                pw.Padding(
                    padding: pw.EdgeInsets.all(10),
                    child: pw.Text("Debited amount",
                        textAlign: pw.TextAlign.left,
                        style: pw.TextStyle(
                            fontSize: 10,
                            color: PdfColors.white,
                            fontWeight: pw.FontWeight.bold))),
                pw.Padding(
                    padding: pw.EdgeInsets.all(10),
                    child: pw.Text("Customer",
                        textAlign: pw.TextAlign.left,
                        style: pw.TextStyle(
                            fontSize: 10,
                            color: PdfColors.white,
                            fontWeight: pw.FontWeight.bold))),
                pw.Padding(
                    padding: pw.EdgeInsets.all(10),
                    child: pw.Text("Payment Method",
                        textAlign: pw.TextAlign.left,
                        style: pw.TextStyle(
                            fontSize: 10,
                            color: PdfColors.white,
                            fontWeight: pw.FontWeight.bold))),
              ]
          ),
          ...rows
        ]
    );
  }






  Future<void> savePdfFile(String filename, Uint8List byteList) async {
    try {
      final output = await getDownloadsDirectory();
      if (output != null) {
        var filepath = "${output.path}/$filename.pdf";
        final file = File(filepath);
        await file.writeAsBytes(byteList);
         // OpenFile.open(filepath);
        await LocalNotification.showNotification(
          title: 'Download Complete',
          body: 'Your payslip has been downloaded.',
          payload: filepath,
        );
      } else {
        throw Exception("Downloads directory not found");
      }
    } catch (e) {
      print("Error saving file: $e");
    }
  }

}
